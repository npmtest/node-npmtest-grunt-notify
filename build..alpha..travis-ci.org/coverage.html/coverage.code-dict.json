{"/home/travis/build/npmtest/node-npmtest-grunt-notify/test.js":"/* istanbul instrument in package npmtest_grunt_notify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/lib.npmtest_grunt_notify.js":"/* istanbul instrument in package npmtest_grunt_notify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_notify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_notify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-notify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_notify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_notify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_notify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_notify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_notify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_notify.__dirname + '/lib.npmtest_grunt_notify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/Gruntfile.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2012 Dylan Greene\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  require('time-grunt')(grunt);\n\n  grunt.initConfig({\n    // Configuration to be run (and then tested).\n    notify: {\n      custom_options: {\n        options: {\n          title: 'Notify Title',\n          message: 'This is a \"Notify Message\" test!'\n        }\n      },\n      just_message: {\n        options: {\n          message: 'Just Message'\n        }\n      },\n      example: {\n        options: {\n          title: 'Doodle or Die',  // optional\n          message: 'Deploy to production success!' //required\n        }\n      },\n      directory: {\n        options: {\n          title: 'Directory',\n          message: 'Look in c:\\\\temp\\\\new\\\\ or /var/tmp/new.'\n        }\n      },\n      newlines: {\n        options: {\n          title: 'Directory',\n          message: 'Line 1\\nLine 2\\nLine3\\nLine 4\\nLine 5.'\n        }\n      }\n    },\n\n    watch: {\n      example: {\n        options: {\n          spawn: true\n        },\n        files: [\n          'Gruntfile.js',\n          'tasks/**/*.js',\n          'test/**/*.js'\n        ],\n        tasks: [\n          'notify:custom_options'\n        ]\n      },\n      test: {\n        options: {\n          spawn: true\n        },\n        files: [\n          'Gruntfile.js',\n          'tasks/**/*.js',\n          'test/**/*.js'\n        ],\n        tasks: [\n          'jshint',\n          'mochaTest'\n        ]\n      }\n    },\n\n    mochaTest: {\n      notify: {\n          src: 'test/**/*.test.js',\n          options: {\n              reporter: 'spec'\n          }\n      }\n    },\n\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc',\n        force: true\n      },\n      all: [\n        'Gruntfile.js',\n        'tasks/**/*.js',\n        'tests/**/*',\n        'lib/**/*'\n      ],\n      fixtures: [\n        'test/fixtures/*.js'\n      ]\n    }\n\n  });\n\n  require('load-grunt-tasks')(grunt);\n  grunt.loadTasks('tasks');\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('test', [\n    'jshint',\n    'notify',\n    'mochaTest'\n  ]);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', [\n    'test'\n  ]);\n\n};","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/notify-lib.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n\n'use strict';\nvar removeColor = require('./util/removeColor');\nvar debug = require('./util/debug');\n\n// Don't show the same message twice in a row\nvar previousMessage;\nvar previousMessageTimeoutMS = 1000;\nvar previousMessageTimer;\n\n\nvar notifyPlatform;\n\nfunction choosePlatform() {\n\n  var options = { debug: debug('grunt-notify')};\n\n  // This needs to be cleaned up to make it easier to add new platforms\n\n  var growl_notify = require('./platforms/growl-notify');\n\n  if (growl_notify.supported(options)) {\n    return growl_notify;\n  }\n\n  var hey_snarl = require('./platforms/hey-snarl');\n\n  if (hey_snarl.supported(options)) {\n    return hey_snarl;\n  }\n\n  var notification_center = require('./platforms/notification-center');\n\n  if (notification_center.supported(options)) {\n    return notification_center;\n  }\n\n  var notify_send = require('./platforms/notify-send');\n\n  if (notify_send.supported(options)) {\n    return notify_send;\n  }\n\n  var toaster = require('./platforms/toaster');\n\n  if (toaster.supported(options)) {\n    return toaster;\n  }\n\n  return require('./platforms/no-notifications');\n}\n\n\n/**\n * Public function to notify\n * @param options - options.message is the only required value. title is recommended. subtitle is going overboard.\n * @param [cb] - optional callback. function(err, stdout, stderr)\n */\nfunction postNotification(options, cb) {\n\n  options.title = removeColor(options.title);\n  options.message = removeColor(options.message);\n\n  if (!options.message) {\n    return cb && cb(!options.message && 'Message is required');\n  }\n\n  if (!notifyPlatform) {\n    notifyPlatform = choosePlatform();\n  }\n\n  function resetPreviousTimer(newMessage) {\n    previousMessage = newMessage;\n    clearTimeout(previousMessageTimer);\n    previousMessageTimer = setTimeout(function(){previousMessage = false;}, previousMessageTimeoutMS);\n  }\n\n  if (options.message === previousMessage) {\n    resetPreviousTimer(options.message);\n    if (typeof cb === 'function') {\n      cb();\n    }\n    return;\n  }\n\n  resetPreviousTimer(options.message);\n\n  options.debug = debug(notifyPlatform.name); //for debug logging\n\n  return notifyPlatform.notify(options, function(err){\n      if (err) {\n        options.debug({\n          return_code: err\n        });\n      }\n      if (typeof cb === 'function') {\n        cb(err);\n      }\n    });\n}\n\nmodule.exports = postNotification;\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/util/removeColor.js":"function removeColor(str) {\n  return typeof str === 'string' ? str.replace(/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/g, '').trim() : str;\n}\n\nmodule.exports = removeColor;","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/util/debug.js":"var grunt = require('grunt');\n\nfunction debug(name, obj) {\n  Object.keys(obj).forEach(function(key){\n    grunt.verbose.ok('[' + name + '] ' + key + ': ' + obj[key]);\n  });\n}\n\nmodule.exports = function(name) {\n  return function(obj) {\n    debug(name, obj);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/tasks/notify_hooks.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nmodule.exports = function gruntTask(grunt) {\n\n  var guessProjectName = require('../lib/util/guessProjectName');\n\n  // All of these settings are customizable via notify_hooks\n  var defaults = {\n    enabled: true,\n    max_jshint_notifications: 5,\n    title: guessProjectName(),\n\t  success: false,\n\t  duration: null\n  };\n\n  var notifyFail = require('../lib/hooks/notify-fail')(grunt, defaults);\n  var notifyJSHint = require('../lib/hooks/notify-jshint')(grunt, defaults);\n\n  grunt.registerTask('notify_hooks', 'Config the automatic notification hooks.', function(){\n    var options = this.options(defaults);\n    notifyFail.setOptions(options);\n    notifyJSHint.setOptions(options);\n  });\n};","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/tasks/notify.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\nmodule.exports = function gruntTask(grunt) {\n\n  var notify = require('../lib/notify-lib');\n  var guessProjectName = require('../lib/util/guessProjectName');\n\n  var defaults = {\n    title:    guessProjectName(),\n    message:  '' //required\n  };\n\n  // Use this to show an arbitrary notification.\n  grunt.registerMultiTask('notify', 'Show an arbitrary notification whenever you need.', function() {\n    var options = this.options(defaults);\n    var done = this.async();\n\n    if (options.message) {\n      notify(options, done);\n    } else {\n      done(new Error('Notify message is required. Make sure your notify configuration is inside an options object.'));\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/hooks/notify-fail.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nmodule.exports = function (grunt, options) {\n\n  var message_count = 0;\n  var StackParser = require('stack-parser');\n  var notify = require('../notify-lib');\n  var removeColor = require('../util/removeColor');\n\n  var cwd = process.cwd();\n\n  function toggleSuccessNotify() {\n    if (!!options.success) {\n      grunt.util.hooker.hook(grunt.log, 'success', notifyHook);\n    } else {\n      grunt.util.hooker.unhook(grunt.log, 'success');\n    }\n  }\n\n  function watchForContribWatchWarnings(e) {\n\n    if (!e || typeof e !== 'string') {\n      return;\n    }\n\n    var msg = removeColor(e);\n    msg = msg.replace(' Use --force to continue.', '');\n\n    if (msg.indexOf('Warning:') === 0) {\n      return notifyHook(msg.replace('Warning: ', ''));\n    }\n    if (msg.indexOf('Fatal error:') === 0) {\n      return notifyHook(msg.replace('Fatal error: ', ''));\n    }\n\n    return e;\n  }\n\n  function exception(e) {\n    var stackDump, stack, message;\n\n    if (e.stack && typeof e.stack !== 'string') {\n      stackDump = StackParser.parse(e.stack);\n      stack = stackDump[0];\n\n      // Find the first stack that isn't a node module or an internal Node function\n      while (stack && (stack.file.match('/node_modules') || !stack.file.match('/'))) {\n        stack = stackDump.shift();\n      }\n    }\n\n    if (stack && stack.file) {\n      message = [\n        stack.file.replace(cwd, ''),\n        'Line ' + stack.line,\n        e.message\n      ].join('\\n');\n    } else {\n      message = e.message;\n    }\n\n    return message;\n  }\n\n  /**\n   * Hook for showing the automatic message\n   * @param e Exception or message\n   * @returns {*}\n   */\n  function notifyHook(e) {\n\n    message_count++;\n\n    var message;\n\n    if (!options.enabled) {\n      return;\n    }\n\n    if (!e) {\n      return;\n    }\n\n    if (e && e.length === 1) {\n      e = e[0];\n    }\n\n    if (/Task .* failed\\./.test(e.message)) {\n      message = e.message;\n    } else if (e.message && e.stack) {\n      message = exception(e);\n    } else {\n      message = e + '';\n    }\n\n    if (message_count > 0 && message === 'Aborted due to warnings.') {\n      // skip unhelpful message because there was probably another one that was more helpful\n      return;\n    }\n\n    // shorten message by removing full path\n    // TODO - make a global replace\n    message = message.replace(cwd, '').replace('\\x07', '');\n\n    return notify({\n      title: options.title + (grunt.task.current.nameArgs ? ' ' + grunt.task.current.nameArgs : ''),\n      message: message,\n      duration: options.duration\n    });\n  }\n\n  // run on warning\n  grunt.util.hooker.hook(grunt, 'warn', notifyHook);\n  grunt.util.hooker.hook(grunt.fail, 'warn', notifyHook);\n  // run on error\n  grunt.util.hooker.hook(grunt.fail, 'error', notifyHook);\n  grunt.util.hooker.hook(grunt.log, 'fail', notifyHook);\n  grunt.util.hooker.hook(grunt.log, 'error', notifyHook);\n  // run on fatal\n  grunt.util.hooker.hook(grunt.fail, 'fatal', notifyHook);\n  // run on success\n  toggleSuccessNotify();\n\n  // grunt-contrib-watch replaces some of these functions so\n  // we need to watch all writeln's too\n  // https://github.com/gruntjs/grunt-contrib-watch/issues/232\n  grunt.util.hooker.hook(grunt.log, 'writeln', watchForContribWatchWarnings);\n\n  function setOptions(opts) {\n    options = opts;\n    toggleSuccessNotify();\n  }\n\n  return {\n    setOptions: setOptions\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/hooks/notify-jshint.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nmodule.exports = function(grunt, options) {\n\n  var notify = require('../notify-lib');\n\n  var filename;\n  var reason;\n  var lineNumber;\n  var count = 0;\n  var enabled;\n\n  function enable() {\n    if (!enabled) {\n      grunt.util.hooker.hook(grunt.log, 'writeln', grabErrors);\n      grunt.util.hooker.hook(grunt.verbose, 'write', grabFilename);\n      enabled = true;\n    }\n  }\n\n  function disable() {\n    if (enabled) {\n      grunt.util.hooker.unhook(grunt.log, 'writeln');\n      grunt.util.hooker.unhook(grunt.verbose, 'write');\n      enabled = false;\n    }\n  }\n\n  function grabFilename(message) {\n\n    var parseMessage = grunt.log.uncolor(message).match(/^Linting\\s(.*)\\.\\.\\.$/);\n    if (parseMessage && parseMessage.length === 2) {\n      filename = parseMessage[1];\n    }\n  }\n\n  function grabErrors(message) {\n    if (!options.enabled) {\n      return;\n    }\n\n    if (!message) {\n      return;\n    }\n\n    var parseMessage = grunt.log.uncolor(message).match(/^\\[L([0-9]*).*[0-9]:\\s(.*)$/);\n\n    if (parseMessage && parseMessage.length === 3) {\n\n      count++;\n      //grunt.log.ok('graberrors ' + count + parseMessage);\n\n      if (count > options.max_jshint_notifications) {\n        disable();\n        return;\n      }\n\n      lineNumber = parseMessage[1];\n      reason = parseMessage[2];\n\n      return;\n    }\n\n    if (lineNumber && reason) {\n      notify({\n          title: options.title + (grunt.task.current.nameArgs ? ' ' + grunt.task.current.nameArgs : ''),\n          message: [\n            filename,\n            'Line ' + lineNumber + ': ' + reason,\n            message.trim()\n          ].join('\\n')\n        });\n\n      lineNumber = false;\n      reason = false;\n    }\n  }\n\n  function checkForJSHint(message) {\n    if (message.match(/jshint/)) {\n      enable();\n    } else {\n      disable();\n    }\n  }\n\n  // try to catch jshint errors\n  grunt.util.hooker.hook(grunt.log, 'header', checkForJSHint);\n\n  function setOptions(opts) {\n    options = opts;\n  }\n\n  return {\n    setOptions: setOptions\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/platforms/growl-notify.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar NOTIFY_TYPE = 'growl';\n\nvar path = require('path');\nvar os = require('os');\nvar findApp = require('../util/findApp');\nvar spawn = require('../util/spawn');\n\nvar cmd = 'growlnotify';\nvar IS_MAC = os.type() === 'Darwin';\nvar IS_WINDOWS = os.type() === 'Windows_NT';\nvar DEFAULT_IMAGE = path.resolve(__dirname, '../../images/grunt-logo.png');\n\nfunction macOnly(string) {\n  return IS_MAC ? string : '';\n}\n\nfunction windowsOnly(string) {\n  return IS_WINDOWS ? string : '';\n}\n\nfunction supported(options) {\n\n  var app = findApp(cmd);\n\n  options.debug({\n    growl: app || (IS_MAC || IS_WINDOWS ? cmd + ' wasn\\'t found. If you were hoping to use Growl, make you sure you have their command line script called Growlnotify. Mac: http://growl.info/downloads or Windows: http://www.growlforwindows.com/gfw/help/growlnotify.aspx and put it in your path. You should be able to type growlnotify --version and get something back.' : 'Growl not available for your OS.')\n  });\n\n  return !!app;\n}\n\nfunction createImageArg(image) {\n\n  var imageType = '';\n  var extension;\n\n  image = image || DEFAULT_IMAGE;\n\n  if (IS_MAC) {\n    extension = path.extname(image).substr(1);\n\n    if (extension === 'icns') {\n      imageType = 'iconpath';\n    } else if (/^[A-Z]/.test(image)) {\n      imageType = 'appIcon';\n    } else if (/^png|gif|jpe?g$/.test(extension)) {\n      imageType = 'image';\n    } else if (extension) {\n      imageType = 'icon';\n      image = extension;\n    } else {\n      imageType = 'icon';\n    }\n\n    return [\n      '--' + imageType,\n      image\n    ];\n  }\n\n  if (IS_WINDOWS) {\n    return [\n      '/i:' + image\n    ];\n  }\n\n  return [];\n}\n\nfunction createTitleArg(title) {\n  if (title) {\n    return [\n      windowsOnly('/t:') + title\n    ];\n  }\n  return [];\n}\n\nfunction createMessageArg(message) {\n  return [\n    macOnly('-m ') + message\n  ];\n}\n\nfunction notify(options, cb) {\n\n  var args = []\n      .concat(createImageArg(options.image))\n      .concat(createMessageArg(options.message))\n      .concat(createTitleArg(options.title));\n\n  options.debug({\n    cmd: cmd,\n    args: args.join(' ')\n  });\n\n  spawn(cmd, args, function(code) {\n      if (code !== 0) {\n        cb(code);\n      } else {\n        cb();\n      }\n    });\n}\n\n\nmodule.exports = {\n  name: NOTIFY_TYPE,\n  supported: supported,\n  notify: notify\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/util/findApp.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar which = require('which').sync;\nvar path = require('path');\nvar fs = require('fs');\n\nmodule.exports = function(filename) {\n\n  if (fs.existsSync(filename)) {\n    return filename;\n  }\n\n  var filenameWithPath;\n\n  // `which` throws errors in sync mode\n  try {\n    filenameWithPath = which(filename);\n    if (!filenameWithPath.match(filename)){\n      return false;\n    }\n  } catch (e) {\n    filenameWithPath = false;\n  }\n\n  return filenameWithPath;\n};","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/util/spawn.js":"'use strict';\n\nvar grunt = require('grunt');\nvar spawn = require('child_process').spawn;\n\nmodule.exports = function(cmd, args, cb){\n\n  var options = {\n    detached: true,\n    stdio: [ 'ignore', 'ignore', 'ignore' ]\n  };\n\n  var child = spawn(cmd, args, options);\n\n  child.on('exit', function (code) {\n    if (typeof cb === 'function') {\n      cb(code);\n    }\n  });\n};","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/platforms/hey-snarl.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar NOTIFY_TYPE = 'snarl';\n\nvar path = require('path');\nvar os = require('os');\nvar spawn = require('../util/spawn');\nvar findApp = require('../util/findApp');\n\nvar cmd = 'heysnarl.exe';\n\nvar IS_WINDOWS = os.type() === 'Windows_NT';\nvar DEFAULT_IMAGE = path.resolve(__dirname, '../../images/grunt-logo.png');\n\nfunction findInstall() {\n\n  var INSTALL_DIR_1 = path.join('full phat', 'Snarl', 'tools');\n  var INSTALL_DIR_2 = path.join('Snarl', 'tools');\n  var PROGRAM_FILES = process.env.ProgramFiles || '';\n  var PROGRAM_FILES_X86 = process.env['ProgramFiles(x86)'] || '';\n\n  return findApp(cmd) ||\n    findApp(path.join(PROGRAM_FILES, INSTALL_DIR_1, cmd)) ||\n    findApp(path.join(PROGRAM_FILES_X86, INSTALL_DIR_1, cmd)) ||\n    findApp(path.join(PROGRAM_FILES, INSTALL_DIR_2, cmd)) ||\n    findApp(path.join(PROGRAM_FILES_X86, INSTALL_DIR_2, cmd));\n}\n\nvar fullPathToApplication = findInstall();\n\nfunction supported(options) {\n\n  options.debug({\n    IS_WINDOWS: IS_WINDOWS,\n    PROGRAM_FILES: process.env.ProgramFiles,\n    PROGRAM_FILES_X86: process.env['ProgramFiles(x86)'],\n    fullPathToApplication: fullPathToApplication,\n    snarl: fullPathToApplication || (IS_WINDOWS ? 'We couldn\\'t find `heysnarl.exe` in your path or in \"full phat/Snarl/tools\" - maybe you have an older version?' : 'Snarl not available for this OS.')\n  });\n\n  return IS_WINDOWS && !!fullPathToApplication;\n}\n\nfunction escape(str) {\n  return str.toString().replace(/&/g, '&&').substr(0, 60);\n}\n\nfunction notify(options, cb) {\n\n  var args = [\n    'notify?' +\n    'title=' + escape(options.title) + '&' +\n    'text=' + escape(options.message) + '&' +\n    'icon=' + (options.image || DEFAULT_IMAGE)\n    ];\n\n  options.debug({\n    cmd: fullPathToApplication,\n    args: args.join(' ')\n  });\n\n  spawn(fullPathToApplication || 'echo', args, function(code){\n    options.debug({return_code: code});\n    if (code < 200 && code > 0) {\n      cb(code);\n    } else {\n      cb();\n    }\n  });\n}\n\nmodule.exports = {\n  name: NOTIFY_TYPE,\n  notify: notify,\n  supported: supported\n};","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/platforms/no-notifications.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar NOTIFY_TYPE = 'no-notifications';\n\nfunction supported(options) {\n  options.debug({\n    fallback: 'No supported notification systems were found'\n  });\n  return true;\n}\n\nfunction notify(options, cb) {\n  options.debug({\n    title: options.title,\n    message: options.message\n  });\n  cb();\n}\n\nmodule.exports = {\n  name: NOTIFY_TYPE,\n  supported: supported,\n  notify: notify\n};","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/platforms/notification-center.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar NOTIFY_TYPE = 'notification-center';\n\nvar spawn = require('../util/spawn');\nvar path = require('path');\nvar os = require('os');\nvar semver = require('semver');\n\n\n// OSX notification system doesn't have an API Node can access so we are using\n// Grunt.app, a modified version of Terminal Notifier, but with the Grunt icon,\n// originally created by Eloy Durán https://github.com/alloy/terminal-notifier\nvar cmd = path.resolve(__dirname, '../../bin/Grunt.app/Contents/MacOS/Grunt');\n\nfunction notificationCenterSupported(options) {\n  var IS_MAC = os.type() === 'Darwin';\n  var MOUNTAIN_LION;\n  try {\n    MOUNTAIN_LION = IS_MAC && semver.satisfies(os.release(), '>=12.0.0');\n  } catch (e) {\n    options.debug({semverError: e });\n  }\n\n\n  options.debug({\n    os: os.type(),\n    version: os.release(),\n    IS_MAC: IS_MAC,\n    MOUNTAIN_LION: MOUNTAIN_LION,\n    notification_center: MOUNTAIN_LION ? 'Will use Notification Center' : 'Not available for your OS.'\n  });\n\n  return IS_MAC && MOUNTAIN_LION;\n}\n\nfunction pluckAsArg(options, prop) {\n  if (options[prop]) {\n    return [\n      '-' + prop,\n      options[prop]\n    ];\n  }\n  return [];\n}\n\nfunction notify(options, cb) {\n\n  var args = []\n    .concat(pluckAsArg(options, 'title'))\n    .concat(pluckAsArg(options, 'message'));\n\n  options.debug({\n    cmd: cmd,\n    args: args.join(' ')\n  });\n\n  spawn(cmd, args, function(code) {\n    if (code !== 0) {\n      cb(code);\n    } else {\n      cb();\n    }\n  });\n}\n\n\nmodule.exports = {\n  name: NOTIFY_TYPE,\n  notify: notify,\n  supported: notificationCenterSupported\n};","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/platforms/notify-send.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar NOTIFY_TYPE = 'notify-send';\n\nvar path = require('path');\nvar spawn = require('../util/spawn');\nvar findApp = require('../util/findApp');\nvar DEFAULT_IMAGE = path.resolve(__dirname, '../../images/grunt-logo.png');\nvar DEFAULT_DURATION = 3000;\nvar CMD = 'notify-send';\n\nfunction supported(options) {\n\n  var app = findApp(CMD);\n\n  options.debug({\n    'notify-send': app || 'notify-send was not found in your path'\n  });\n\n  return !!findApp(CMD);\n}\n\nfunction notify(options, cb) {\n\n  var args = [\n    '--hint=int:transient:1',\n    '--icon=' + DEFAULT_IMAGE,\n    '--expire-time=' + (options.duration * 1000 || DEFAULT_DURATION),\n    options.title,\n    options.message\n  ];\n\n  options.debug({\n    cmd: CMD,\n    args: args.join(' ')\n  });\n\n  spawn(CMD, args, function(code) {\n    if (code !== 0) {\n      cb(code);\n    } else {\n      cb();\n    }\n  });\n}\n\nmodule.exports = {\n  name: NOTIFY_TYPE,\n  notify: notify,\n  supported: supported\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/platforms/toaster.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2014 Dylan Greene, 2014 Matej Simek\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar NOTIFY_TYPE = 'toaster';\n\nvar path = require('path');\nvar os = require('os');\nvar spawn = require('../util/spawn');\nvar semver = require('semver');\n\n// A wee Win8 console notifications app. Post toast notifications from the console, making it easy to integrate into existing batch scripts etc.\n// Toaster by Nels Oscar https://github.com/nels-o/toaster\nvar CMD = path.resolve(__dirname, '../../bin/toaster/toast.exe');\nvar IS_WINDOWS = os.type() === 'Windows_NT';\nvar DEFAULT_IMAGE = path.resolve(__dirname, '../../images/grunt-logo.png');\n\n\nfunction supported(options) {\n  var WINDOWS_8;\n  try {\n    WINDOWS_8 = IS_WINDOWS && semver.satisfies(os.release(), '>=6.2.9200');\n  } catch (e) {\n    options.debug({semverError: e });\n  }\n\n  options.debug({\n    os: os.type(),\n    version: os.release(),\n    IS_WINDOWS: IS_WINDOWS,\n    WINDOWS_8: WINDOWS_8,\n    toaster: IS_WINDOWS && WINDOWS_8 ? 'Will use Windows 8 notifications' : 'Not available for your OS.'\n  });\n\n  return IS_WINDOWS && WINDOWS_8;\n}\n\nfunction notify(options, cb) {\n  var args = [\n    '-p', DEFAULT_IMAGE,\n    '-t', options.title,\n    '-m', options.message\n  ];\n\n  options.debug({\n    cmd: CMD,\n    args: args.join(' ')\n  });\n\n  spawn(CMD, args, function(code) {\n    if (code !== 0) {\n      cb(code);\n    } else {\n      cb();\n    }\n  });\n}\n\n\nmodule.exports = {\n  name: NOTIFY_TYPE,\n  notify: notify,\n  supported: supported\n};","/home/travis/build/npmtest/node-npmtest-grunt-notify/node_modules/grunt-notify/lib/util/guessProjectName.js":"/*\n * grunt-notify\n * https://github.com/dylang/grunt-notify\n *\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar path = require('path');\n\nvar projectName;\n\nfunction packageJson() {\n  var packageObj,\n    projectName;\n  try {\n    packageObj = require(process.cwd() + path.sep + 'package.json');\n    projectName = packageObj.name;\n  } catch (e) {\n    // package.json not found\n  }\n\n  return projectName;\n}\n\nfunction currentWorkingDirectory() {\n  projectName = process.cwd().split(path.sep).pop();\n  return projectName;\n}\n\n\nmodule.exports = function guessProjectName(){\n  return projectName || packageJson() || currentWorkingDirectory();\n};\n"}